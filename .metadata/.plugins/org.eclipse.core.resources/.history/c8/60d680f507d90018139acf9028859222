#include <platform.h>
#include <stdio.h>

// PROCESS FOR QUEEN
void worker(const unsigned char w[3][4], //the world
            unsigned int x, //the starting position x
            unsigned int y, //the starting position y
            chanend cQueen) { //the channel end connecting to queen

  unsigned int command = 0; //current command from queen
  unsigned int food; //current fertility of land

  printf("Worker is starting...\n");

  //LIFE OF A WORKER FOR 5 ITERATIONS...WHILE (1) {...} FOR ENDLESS LIFE
  for(int k=0;k<5;k++) {
    food = w[x][y]; //current food at land square
    //1. REPORT CURRENT SITUATION TO QUEEN
    cQueen <: food;
    //2. RECEIVE COMMAND FROM QUEEN
    cQueen :> command;
    //3.1 HARVEST IF COMMANDED
    if (command==0) {
    //harvesting food...
    }
    //3.2 MOVE ON (i.e. EXPLORE NEIGHBOURHOOD) IF COMMANDED
    else
    //moving on...make two steps
    for(int i=0; i<2; i++) {
      //check land fertility in east and south
      if ( w[(x+1)%3][y] > w[x][(y+1)%4] )
        //move east
        x = (x+1)%3;
      else
        //move south
        y = (y+1)%4;
    }
  }
}

// PROCESS FOR WORKER

// MAIN FUNC
int main (void) {
    // 1. DEFINE WORLD
    const unsigned char world[3][4] = {{10,0,1,7},{2,10,0,3},{6,8,7,6}}; //the world

    // 2. DEFINE CHANNELS
    chan cWorkerAtoQueen; //synchronised channel between worker A and queen
    chan cWorkerBtoQueen; //synchronised channel between worker B and queen

    // 3. RUN ALL PROCESSES

    printf("World starts...\n");

    par {
         worker(world,0,1,cWorkerAtoQueen); //start concurrent ant process A
         worker(world,1,0,cWorkerBtoQueen); //start concurrent ant process B
         queen(world,1,1,cWorkerAtoQueen,cWorkerBtoQueen); //start concurrent ant process queen
       }

       printf("World ends...\n");
       //DONE & TERMINATE PROGRAM
       return 0;
}
